import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/insurance.csv")

print(df.head())

print(df.isnull().sum())


print(df.describe())

sns.pairplot(df)
plt.show()

plt.figure(figsize=(12, 6))
sns.barplot(x='smoker', y='charges', data=df)
plt.title('Medical Costs by Smoking Status')
plt.show()

plt.figure(figsize=(12, 6))
sns.countplot(x='region', data=df, hue='sex')
plt.title('Distribution of Gender in Different Regions')
plt.show()

plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', linewidths=.5)
plt.title('Correlation Matrix')
plt.show()

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
df[['age', 'bmi', 'children']] = scaler.fit_transform(df[['age', 'bmi', 'children']])



df.head()

df = pd.get_dummies(df, columns=["region"], drop_first=True)

df.head()

z=df.copy()

z.head()

import numpy as np
df['charges'] = np.log1p(df['charges'])

from sklearn.model_selection import train_test_split

 X= df.drop(columns=['charges'])
 y = df['charges']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Shape of training features:", X_train.shape)
print("Shape of testing features:", X_test.shape)
print("Shape of training target:", y_train.shape)
print("Shape of testing target:", y_test.shape)

from sklearn.metrics import mean_absolute_error

def evaluate_model(model, X, y):
    predictions = model.predict(X)
    mae = mean_absolute_error(y, predictions)
    return mae

def evaluate_model(model, X, y):
    predictions = model.predict(X)
    mae = mean_absolute_error(y, predictions)
    return mae

mae_scores = {}

from sklearn.linear_model import LinearRegression

lr_model = LinearRegression()

lr_model.fit(X_train, y_train)

mae_lr = evaluate_model(lr_model, X_test, y_test)
mae_scores['Linear Regression'] = mae_lr

print("Mean Absolute Error (Linear Regression):", mae_lr)





